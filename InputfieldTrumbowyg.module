<?php

/**
 * ProcessWire inputfield module for Trumbowyg WYSIWYG editor
 * 
 * @copyright Copyright (c) 2013-2014, Teppo Koivula
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 * Trumbowyg Copyright (c) 2012-2014 Alexandre Demode (Alex-D)
 * http://alex-d.github.io/Trumbowyg/
 *
 */
class InputfieldTrumbowyg extends InputfieldTextarea {

    /**
     * Return information about this module (required)
     *
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Trumbowyg',
            'version' => 3,
            'summary' => __('Trumbowyg textarea rich text editor (alpha module)', __FILE__),
        );
    }

    /**
     * Default configuration
     *
     * @return array
     */
    static public function getDefaultData() {
        return array(
            'mobile' => true,
            'tablet' => true,
            'semantic' => true,
            'autogrow' => false,
        );
    }

    /**
     * Placeholder for all configuration options
     *
     */
    protected $options = array();

    /**
     * Construct and set default configuration
     *
     */
    public function __construct() {
        parent::__construct();
        foreach (self::getDefaultData() as $key => $value) {
            $this->$key = $value;
            $this->options[] = $key;
        }
    }

    /**
     * Render the output code for Trumbowyg
     *
     * @return string rendered field markup
     */
    public function ___render() {

        // load trumbowyg
        $this->config->scripts->add($this->config->urls->{$this->className()} . "trumbowyg/trumbowyg.min.js");
        $this->config->styles->add($this->config->urls->{$this->className()} . "trumbowyg/design/css/trumbowyg.css");

        // config settings
        $config = array();
        foreach ($this->options as $option) {
            $config[$option] = $this->$option;
        }

        // return output
        $config_json = json_encode($config);
        return parent::___render() . "<script>$('textarea[name={$this->name}]').trumbowyg({$config_json});</script>";

    }

    /**
     * Process data submitted to a Trumbowyg field
     *
     * @param WireInputData $input
     * @return InputfieldTrumbowyg
     */
    public function processInput(WireInputData $input) {

        $value = trim($input[$this->name]); 

        if ($value != $this->attr('value')) {
            $this->trackChange('value');
            $this->setAttribute('value', $value);     
        }

        return $this;

    }

    /**
     * Inputfield configuration screen
     * 
     * Available Trumbowyg config settings are explained here:
     * http://alex-d.github.io/Trumbowyg/documentation.html
     *
     * @return InputfieldWrapper
     */
    public function getConfigInputfields() {

        $fields = parent::___getConfigInputfields();
        
        // fieldset for Trumbowyg settings
        $wrapper = wire('modules')->get('InputfieldFieldset');
        $wrapper->label = $this->_('Trumbowyg Settings');
        $fields->add($wrapper);

        // semantic
        $field = wire('modules')->get('InputfieldCheckbox');
        $field->name = 'semantic';
        $field->label = $this->_('Enable semantic output');
        $field->description = $this->_('Generates a better, more semantic oriented HTML (i.e. <em> instead of <i>, <strong> intsead of <b>, etc.).');
        $field->notes = $this->_('ALPHA: This feature is in development and not completly functional.');
        $field->checked = $this->{$field->name};
        $wrapper->add($field);

        // auto grow
        $field = wire('modules')->get('InputfieldCheckbox');
        $field->name = 'autogrow';
        $field->label = $this->_('Enable auto grow');
        $field->description = $this->_('The text editon zone can extend itself when writing a long text.');
        $field->checked = $this->{$field->name};
        $wrapper->add($field);

        return $fields; 

    }
}
